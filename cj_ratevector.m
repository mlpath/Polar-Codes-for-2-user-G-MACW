% cooperative jamming rate vector
% 
% clc
% clear all
% close all
%%%%%%%%%%%%%%%%%%%%%%% Does not work 
% input_rate_vector = [1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 3];
% input_rate_vector = [1, 1, 1, 1, 1, 1,...
%                      1, 2, 2, 1, 2,... 
%                      2, 2, 1, 2,... 
%                      1, 2, 2,... 
%                      2, 2,... 
%                      2,... 
%                      2, 2, 1, 2,...
%                      2, 2, 3,...
%                      2, 3,... 
%                      2,...
%                      2, 2, 3,... 
%                      2, 3,... 
%                      2,... 
%                      2, 2,... 
%                      3,... 
%                      3,...
%                      2, 2, 3,... 
%                      2, 3,... 
%                      2,...
%                      2, 3, 3,... 
%                      3,...
%                      2, 3, 3 ,...
%                      3,...
%                      3,...
%                      2, 3, 3, 3, ...
%                      3, ...
%                      3, ...
%                      3];
% 
% main users are from 1 to M
% M = 1;
% % jammers are from M+1 to M+J
% J = 1;
% 
function out_vector = cj_ratevector(input_rate_vector, M, J)
% all jammers are transmitting
jam_str = num2str(ones(2^M, 1));
jam_str = repmat(jam_str,1,J);
ix0 = i_vec_order(2^M);
first_half = dec2bin(ix0);
% first_half = dec2bin((2^M-1)-(1:2^M-1));
% make the concatenated string
ix = bin2dec(strcat(jam_str, first_half)); 
fixed_term = ix(1);
ix(1) = [];
% 
vec_order = i_vec_order(2^(M+J)); 
vec_order = vec_order(2:end);
%
[~,ix_sort] = sort(vec_order);
in_rate = input_rate_vector(ix_sort);
% 
tmp = in_rate(ix);
out_vector = in_rate(ix) - in_rate(fixed_term);
% add_vector = zeros(1,2^M-1);
% %
% for i = 1:length(ix)
%    add_vector(i) = input_rate_vector(vec_order == ix(i));
% end
% % 
% out_vector = add_vector - input_rate_vector(fixed_term);

if isinteger(out_vector)
    [B, bases, ~] = find_bmat([0 out_vector])
end
% 
% [~,ix2] = sort(vec_order);
% sort_vec = input_rate_vector(ix2);
% % rank of matrices from the large mac 
% tmp = sort_vec(ix);
% % final minus vector 
% out_order = i_vec_order(2^(M)); 
% minus_vec =  tmp(out_order(2:end)); 
% final_vec = input_rate_vector(end) - minus_vec